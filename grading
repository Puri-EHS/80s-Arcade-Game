Project 3
-------------------------------------------------------------------------------

80s-Arcade-Game

Contributor Code Docu Asst Adj. Score
----------- ---- ---- ---- ---- -----
Aarna        231   76   47   +1 18/20 A
Ben          483        43   +1 18/20 A
Kelyan       118        14   -1 16/20 B-
Nikil         10    1   74   -2 15/20 C
Vaibhav      254   17    9   +0 17/20 B

-------------------------------------------------------------------------------

Rubric:
1. Baseline:   15
2. Creativity: +0.5     working game with a twist
3. Design:     +0.5     working sprites
4. Clean code: +0
5. Document:   +1       detailed description, good retrospective
   Total:      17

-------------------------------------------------------------------------------

Comments:

* You had me worried, but you got the game running!

* You got all the graphics working in the end (yay!), but it looks like you
  didn't have time to polish them. A few things seem a little off (sprite size
  and position), and it seems to depend on which charater you play.

* You got the twist working too, but you may have noticed that it's not quite
  as twisty as most projects. I'll be with more effort you could have built
  out the powerup idea into something more interesting!

* Hm, there's some weirdness with directory and file names--sometimes you
  capitalize the name and sometimes you don't (e.g. Character_Images vs
  Character_images). This prevents it from running on non-Windows machines.

* Your code is generally easy to read, but some of the functions are
  embarrassingly long.

* Good job factoring out the player base class. You could probably do even more
  to combine common functionality, resulting in very small derived classes.

* Nikil, it looks like you mostly work on assets? But one of the requirements
  was to contribute a significant amount of code. I looked through all your
  commits, and the only substantial code I could find were your very early
  contributinos toward Game.py.

* Issues: 27 created. Looks like you made use of issues, but not yet at a very
  granual level, and no commits are tagged.

-------------------------------------------------------------------------------

Generic fine print:
a. "Code" shows the approximate lines of code contributed. This is just a line
   count of "git blame" and shouldn't be taken too seriously. Still, in many
   cases it gives quick sniff test of who did how much work.
b. "Docu" is the same thing applied to the documentation if it is in markdown.
c. "Asst" is an approximate count of the non-code assets contributed, e.g.
   images and sounds.
d. "Adj." is a credit adjustment for contributors who did significantly more or
   less than than average contributor. Credit adjustments sum to 0.
e. "Score" is the final score, taken by adding the lines from the rubric and
   the credit adjustment. Score is capped at 20/20.

1. "Baseline" means all requirements are met. This gives you a C if it's all you
   have.
2. "Creativity" is a measure of how much tought and energy you put into going
   beyond the minimum requirements.
   Points can be deducted here if some requirements are missing.
3. "Design" gives extra points for the look of the UI and overall usability.
   Points can be deducted here if there are errors or crashes.
4. "Clean code" indicates how easy the code is to read. Good code consists of
   short functions with clear names, organized in a coherent way.
   Points can be deducted here if code is redundant or especially messy.
5. "Document" gives extra points if the documentation is especially clear or
   comprehensive.
   Points can be deducted here if the documentation is missing or insufficient.
